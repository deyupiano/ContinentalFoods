// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230513203126_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.Friendships.FriendRequest", b =>
                {
                    b.Property<Guid>("FriendRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateResponded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReceiverUserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequesterUserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Response")
                        .HasColumnType("int");

                    b.HasKey("FriendRequestId");

                    b.HasIndex("ReceiverUserProfileId");

                    b.HasIndex("RequesterUserProfileId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.Friendships.Friendship", b =>
                {
                    b.Property<Guid>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEstablished")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FirstFriendUserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FriendshipStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("SecondFriendUserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FriendshipId");

                    b.HasIndex("FirstFriendUserProfileId");

                    b.HasIndex("SecondFriendUserProfileId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.PostAggregate.PostComment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.PostAggregate.PostInteraction", b =>
                {
                    b.Property<Guid>("InteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InteractionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PostInteraction");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("UserProfileId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Domain.Aggregates.MealAggregate.Meal", b =>
                {
                    b.Property<Guid>("IdMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient17")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient18")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient19")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient20")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient21")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient22")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient23")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient24")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient25")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient26")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient27")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient28")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient29")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient30")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMealThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure16")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure17")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure18")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure19")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure20")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure21")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure22")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure23")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure24")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure25")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure26")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure27")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure28")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure29")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure30")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrYoutube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMeal");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserCaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.Friendships.FriendRequest", b =>
                {
                    b.HasOne("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverUserProfileId");

                    b.HasOne("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterUserProfileId");

                    b.Navigation("Receiver");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.Friendships.Friendship", b =>
                {
                    b.HasOne("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", "FirstFriend")
                        .WithMany()
                        .HasForeignKey("FirstFriendUserProfileId");

                    b.HasOne("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", "SecondFriend")
                        .WithMany()
                        .HasForeignKey("SecondFriendUserProfileId");

                    b.Navigation("FirstFriend");

                    b.Navigation("SecondFriend");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.HasOne("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.PostAggregate.PostComment", b =>
                {
                    b.HasOne("ContinentalFoods.Domain.Aggregates.PostAggregate.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.PostAggregate.PostInteraction", b =>
                {
                    b.HasOne("ContinentalFoods.Domain.Aggregates.PostAggregate.Post", null)
                        .WithMany("Interactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.UserProfile", b =>
                {
                    b.OwnsOne("ContinentalFoods.Domain.Aggregates.UserProfileAggregate.BasicInfo", "BasicInfo", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CurrentCity")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnType("datetime2");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("BasicInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContinentalFoods.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Interactions");
                });
#pragma warning restore 612, 618
        }
    }
}
